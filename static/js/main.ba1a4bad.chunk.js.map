{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["randColor","colors","Math","floor","random","length","QuoteBox","props","smallPadding","margin","marginBottom","selected","qJSON","chosen","quotes","currentQuote","quote","currentAuthor","author","$","attr","encodeURIComponent","randQuote","json","twtLink","react_default","a","createElement","style","backgroundColor","width","height","borderRadius","id","Quote","color","Author","class","position","top","Object","objectSpread","onClick","changeColor","type","padding","index_es","icon","faTumblr","target","rel","href","faTwitter","textAlign","fontSize","paddingRight","paddingBottom","faQuoteLeft","App","_useState","useState","_useState2","slicedToArray","colorData","setColor","quotesData","ajax","async","global","url","dataType","success","data","crossorigin","src","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ba1a4bad.chunk.js","sourcesContent":["import React,{useState}  from 'react';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './App.css';\nimport $ from 'jquery';\nimport \"jqueryui\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons'\n\n\n  function randQuote(qJSON){\n    let chosen= qJSON.quotes[\n      Math.floor(Math.random() * qJSON.quotes.length)\n    ];\n    let currentQuote = chosen.quote;\n    let currentAuthor=chosen.author;\n    $('#tweet-quote').attr(\n      'href',\n      'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' +\n        encodeURIComponent('\"' + currentQuote + '\" ' + currentAuthor)\n    );\n    return chosen\n  }\n\n  function randColor(){\n    let colors =  [\n      '#16a085',\n      '#27ae60',\n      '#2c3e50',\n      '#f39c12',\n      '#e74c3c',\n      '#9b59b6',\n      '#FB6964',\n      '#342224',\n      '#472E32',\n      '#BDBB99',\n      '#77B1A9',\n      '#73A857'\n    ];\n    return colors[Math.floor(Math.random() * colors.length)]\n  }\n\nfunction App() {\n  const [colorData,setColor] = useState(randColor())\n  let style={\n    backgroundColor:colorData,\n    width:\"100%\",\n    height:\"100%\",\n    position:\"absolute\",\n    top:\"0\",\n    margin:\"0\"\n    // padding:\"0\"\n    // border:\"0\"\n  }\n  \n\n  var quotesData = (function () {\n    var quotesData = null;\n    $.ajax({\n        'async': false,\n        'global': false,\n        'url': \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\",\n        'dataType': \"json\",\n        'success': function (data) {\n            quotesData = data;\n        }\n    });\n    return quotesData;\n})();\n\n  return (\n    \n    <h1 class=\"d-flex align-items-center justify-content-center\" style={style}>\n      <script crossorigin src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n      <QuoteBox id=\"quote-box\" changeColor={setColor} color={colorData} json={quotesData}>\n      \n      </QuoteBox>\n      \n    </h1>\n  );\n}\n\nfunction QuoteBox(props){\n    let style={\n      backgroundColor:\"white\",\n      margin:\"10px\",\n      width:\"35%\",\n      height:\"35%\",\n      borderRadius:10\n    }\n    let btnStyle={\n      // border:\"1px solid black\",\n      position:\"absolute\",\n      top:\"60%\",\n      width:\"35%\",\n    }\n    let smallPadding={\n      margin:3,\n      marginBottom:10\n    }\n    let selected = randQuote(props.json)\n\n    let twtLink='https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + selected.quote + '\" ' + selected.author)\n    return(\n      <div  style={style} id=\"quote-box\">\n        <div id=\"text\">\n          <Quote id=\"text\" color={props.color} quote={selected.quote}/>\n        </div>\n        <div id=\"author\">\n          <Author author={selected.author}/>\n        </div>\n          <div class=\"d-flex align-items-center justify-content-around\" style={btnStyle}>\n            <div>\n            <button id=\"new-quote\" style={{...smallPadding,backgroundColor:props.color}} onClick={() => props.changeColor(randColor())} type=\"button\" class=\"btn btn-primary\">New Quote</button>\n            </div>\n            <div></div>\n            <div style={{padding:0}}>\n            <button style={smallPadding} type=\"button\" class=\"btn btn-primary\"><FontAwesomeIcon icon={faTumblr}/></button>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={twtLink} id='tweet-quote'><button style={smallPadding} type=\"button\" class=\"btn btn-primary\"><FontAwesomeIcon icon={faTwitter}/></button></a>\n            \n            </div>\n            \n          </div>\n          \n      \n      </div>\n    )\n  }\n\n\nfunction Author(props){\n  let style={\n    textAlign:\"right\",\n    fontSize:\"25%\",\n    paddingRight:10\n  }\n  return(\n    <p style={style}>- {props.author}</p>\n  )\n}\n\nfunction Quote(props){\n  let style={\n    padding:\"5%\",\n    fontSize:\"50%\",\n    textAlign:\"center\",\n    color:props.color,\n    marginBottom:0,\n    paddingBottom:\"3%\"\n  }\n  return(\n    <h1 style={style}><FontAwesomeIcon icon={faQuoteLeft}/> {props.quote}</h1>\n  )\n}\n\n\n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}